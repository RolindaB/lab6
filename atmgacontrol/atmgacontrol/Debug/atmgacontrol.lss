
atmgacontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a25  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000481  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001eb  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_buttons>:
#define BUTTON_B      PB4  // D12 en Arduino (PB4 en ATmega328P)
volatile char receivedChar = 0;    //Variable que almacena el valor del UART

void init_buttons() {
	// Configurar los pines como entradas con pull-up
	DDRD &= ~(1 << BUTTON_UP); // Configurar PD7 (D7) como entrada
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f 77       	andi	r24, 0x7F	; 127
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON_UP); // Activar pull-up interno en PD7 (D7)
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~((1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) |(1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B)); // Configurar PB0-PB4 (D8-D12) como entradas
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	80 7e       	andi	r24, 0xE0	; 224
  a0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) |(1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B);  // Activar pull-up interno en PB0-PB4 (D8-D12)
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 61       	ori	r24, 0x1F	; 31
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <check_buttons>:
}


void check_buttons() {
	// Comprobar si algún botón está presionado
	if (!(PIND & (1 << BUTTON_UP))) {
  aa:	4f 99       	sbic	0x09, 7	; 9
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <check_buttons+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <check_buttons+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <check_buttons+0x14>
  be:	00 00       	nop
		_delay_ms(200);
		writeUART('U');
  c0:	85 e5       	ldi	r24, 0x55	; 85
  c2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
	}
	if (!(PINB & (1 << BUTTON_DOWN))) {
  c6:	18 99       	sbic	0x03, 0	; 3
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <check_buttons+0x38>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <check_buttons+0x26>
  d8:	00 c0       	rjmp	.+0      	; 0xda <check_buttons+0x30>
  da:	00 00       	nop
		_delay_ms(200);
		writeUART('D');
  dc:	84 e4       	ldi	r24, 0x44	; 68
  de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
	}
	if (!(PINB & (1 << BUTTON_LEFT))) {
  e2:	19 99       	sbic	0x03, 1	; 3
  e4:	0c c0       	rjmp	.+24     	; 0xfe <check_buttons+0x54>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ec       	ldi	r24, 0xC3	; 195
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <check_buttons+0x42>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <check_buttons+0x4c>
  f6:	00 00       	nop
		_delay_ms(200);
		writeUART('L');
  f8:	8c e4       	ldi	r24, 0x4C	; 76
  fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
	}
	if (!(PINB & (1 << BUTTON_RIGHT))) {
  fe:	1a 99       	sbic	0x03, 2	; 3
 100:	0c c0       	rjmp	.+24     	; 0x11a <check_buttons+0x70>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	83 ec       	ldi	r24, 0xC3	; 195
 106:	99 e0       	ldi	r25, 0x09	; 9
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <check_buttons+0x5e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <check_buttons+0x68>
 112:	00 00       	nop
		_delay_ms(200);
		writeUART('R');
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
	}
	if (!(PINB & (1 << BUTTON_A))) {
 11a:	1b 99       	sbic	0x03, 3	; 3
 11c:	03 c0       	rjmp	.+6      	; 0x124 <check_buttons+0x7a>
		writeUART('A');
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
	}
	if (!(PINB & (1 << BUTTON_B))) {
 124:	1c 99       	sbic	0x03, 4	; 3
 126:	0c c0       	rjmp	.+24     	; 0x140 <check_buttons+0x96>
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <check_buttons+0x84>
 136:	00 c0       	rjmp	.+0      	; 0x138 <check_buttons+0x8e>
 138:	00 00       	nop
		_delay_ms(200);
		writeUART('B');
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <writeUART>
 140:	08 95       	ret

00000142 <main>:
	
}


int main(void) {
	 initUART9600(); // Inicializar UART a 9600 baud
 142:	0e 94 c5 00 	call	0x18a	; 0x18a <initUART9600>
	init_buttons();   // Inicializar los botones
 146:	0e 94 48 00 	call	0x90	; 0x90 <init_buttons>
	//sei();
	while (1) {
		check_buttons();  // Revisar el estado de los botones
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <check_buttons>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	81 ee       	ldi	r24, 0xE1	; 225
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x12>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x1c>
 15e:	00 00       	nop
 160:	f4 cf       	rjmp	.-24     	; 0x14a <main+0x8>

00000162 <__vector_18>:
	}
	return 0;
}

ISR(USART_RX_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 16e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 176:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17a:	85 ff       	sbrs	r24, 5
 17c:	fc cf       	rjmp	.-8      	; 0x176 <__vector_18+0x14>
	
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <initUART9600>:
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	8a b9       	out	0x0a, r24	; 10
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	82 60       	ori	r24, 0x02	; 2
 194:	8a b9       	out	0x0a, r24	; 10
 196:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	10 82       	st	Z, r1
 1a0:	80 81       	ld	r24, Z
 1a2:	88 69       	ori	r24, 0x98	; 152
 1a4:	80 83       	st	Z, r24
 1a6:	e2 ec       	ldi	r30, 0xC2	; 194
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	10 82       	st	Z, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	86 60       	ori	r24, 0x06	; 6
 1b0:	80 83       	st	Z, r24
 1b2:	87 e6       	ldi	r24, 0x67	; 103
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1be:	08 95       	ret

000001c0 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 1c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c4:	95 ff       	sbrs	r25, 5
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <writeUART>
	UDR0 = Caracter;
 1c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
