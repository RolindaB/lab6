
atmgacontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000945  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000768  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_buttons>:
volatile uint8_t button_b_state = 0;     // Estado del botón B
volatile char receivedChar = '\0';        // Carácter recibido por UART

void init_buttons() {
	// Configurar los pines como entradas con pull-up
	DDRD &= ~(1 << BUTTON_UP); // Configurar PD7 como entrada
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f 77       	andi	r24, 0x7F	; 127
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON_UP); // Activar pull-up interno en PD7
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8b b9       	out	0x0b, r24	; 11

	DDRB &= ~((1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) | (1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B)); // Configurar PB0-PB4 como entradas
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	80 7e       	andi	r24, 0xE0	; 224
  a0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) | (1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B);  // Activar pull-up interno
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 61       	ori	r24, 0x1F	; 31
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <check_buttons>:
}

void check_buttons() {
	// Verificar el antirrebote
	if (debounce_counter > 0) {
  aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <debounce_counter>
  ae:	88 23       	and	r24, r24
  b0:	29 f0       	breq	.+10     	; 0xbc <check_buttons+0x12>
		debounce_counter++;
  b2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <debounce_counter>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <debounce_counter>
	}

	// Esperar 20 ms para estabilización
	if (debounce_counter >= 20) {
  bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <debounce_counter>
  c0:	84 31       	cpi	r24, 0x14	; 20
  c2:	08 f4       	brcc	.+2      	; 0xc6 <check_buttons+0x1c>
  c4:	62 c0       	rjmp	.+196    	; 0x18a <check_buttons+0xe0>
		debounce_counter = 0;
  c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <debounce_counter>

		// Verificar el estado del botón UP
		if (!(PIND & (1 << BUTTON_UP)) && (button_up_state == 0)) {
  ca:	4f 99       	sbic	0x09, 7	; 9
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <check_buttons+0x3a>
  ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <button_up_state>
  d2:	81 11       	cpse	r24, r1
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <check_buttons+0x3a>
			writeUART('U'); // Enviar U por UART
  d6:	85 e5       	ldi	r24, 0x55	; 85
  d8:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_up_state = 1; // Actualiza el estado del botón UP
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <button_up_state>
  e2:	03 c0       	rjmp	.+6      	; 0xea <check_buttons+0x40>
			} else if (PIND & (1 << BUTTON_UP)) {
  e4:	4f 99       	sbic	0x09, 7	; 9
			button_up_state = 0; // Restablece el estado si se suelta el botón UP
  e6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <button_up_state>
		}

		// Verificar el estado del botón DOWN
		if (!(PINB & (1 << BUTTON_DOWN)) && (button_down_state == 0)) {
  ea:	18 99       	sbic	0x03, 0	; 3
  ec:	0b c0       	rjmp	.+22     	; 0x104 <check_buttons+0x5a>
  ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_down_state>
  f2:	81 11       	cpse	r24, r1
  f4:	07 c0       	rjmp	.+14     	; 0x104 <check_buttons+0x5a>
			writeUART('D'); // Enviar D por UART
  f6:	84 e4       	ldi	r24, 0x44	; 68
  f8:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_down_state = 1; // Actualiza el estado del botón DOWN
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_down_state>
 102:	03 c0       	rjmp	.+6      	; 0x10a <check_buttons+0x60>
			} else if (PINB & (1 << BUTTON_DOWN)) {
 104:	18 99       	sbic	0x03, 0	; 3
			button_down_state = 0; // Restablece el estado si se suelta el botón DOWN
 106:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <button_down_state>
		}

		// Verificar el estado del botón LEFT
		if (!(PINB & (1 << BUTTON_LEFT)) && (button_left_state == 0)) {
 10a:	19 99       	sbic	0x03, 1	; 3
 10c:	0b c0       	rjmp	.+22     	; 0x124 <check_buttons+0x7a>
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <button_left_state>
 112:	81 11       	cpse	r24, r1
 114:	07 c0       	rjmp	.+14     	; 0x124 <check_buttons+0x7a>
			writeUART('L'); // Enviar L por UART
 116:	8c e4       	ldi	r24, 0x4C	; 76
 118:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_left_state = 1; // Actualiza el estado del botón LEFT
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button_left_state>
 122:	03 c0       	rjmp	.+6      	; 0x12a <check_buttons+0x80>
			} else if (PINB & (1 << BUTTON_LEFT)) {
 124:	19 99       	sbic	0x03, 1	; 3
			button_left_state = 0; // Restablece el estado si se suelta el botón LEFT
 126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <button_left_state>
		}

		// Verificar el estado del botón RIGHT
		if (!(PINB & (1 << BUTTON_RIGHT)) && (button_right_state == 0)) {
 12a:	1a 99       	sbic	0x03, 2	; 3
 12c:	0b c0       	rjmp	.+22     	; 0x144 <check_buttons+0x9a>
 12e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <button_right_state>
 132:	81 11       	cpse	r24, r1
 134:	07 c0       	rjmp	.+14     	; 0x144 <check_buttons+0x9a>
			writeUART('R'); // Enviar R por UART
 136:	82 e5       	ldi	r24, 0x52	; 82
 138:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_right_state = 1; // Actualiza el estado del botón RIGHT
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <button_right_state>
 142:	03 c0       	rjmp	.+6      	; 0x14a <check_buttons+0xa0>
			} else if (PINB & (1 << BUTTON_RIGHT)) {
 144:	1a 99       	sbic	0x03, 2	; 3
			button_right_state = 0; // Restablece el estado si se suelta el botón RIGHT
 146:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <button_right_state>
		}

		// Verificar el estado del botón A
		if (!(PINB & (1 << BUTTON_A)) && (button_a_state == 0)) {
 14a:	1b 99       	sbic	0x03, 3	; 3
 14c:	0b c0       	rjmp	.+22     	; 0x164 <check_buttons+0xba>
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <button_a_state>
 152:	81 11       	cpse	r24, r1
 154:	07 c0       	rjmp	.+14     	; 0x164 <check_buttons+0xba>
			writeUART('A'); // Enviar A por UART
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_a_state = 1; // Actualiza el estado del botón A
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <button_a_state>
 162:	03 c0       	rjmp	.+6      	; 0x16a <check_buttons+0xc0>
			} else if (PINB & (1 << BUTTON_A)) {
 164:	1b 99       	sbic	0x03, 3	; 3
			button_a_state = 0; // Restablece el estado si se suelta el botón A
 166:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <button_a_state>
		}

		// Verificar el estado del botón B
		if (!(PINB & (1 << BUTTON_B)) && (button_b_state == 0)) {
 16a:	1c 99       	sbic	0x03, 4	; 3
 16c:	0b c0       	rjmp	.+22     	; 0x184 <check_buttons+0xda>
 16e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_b_state>
 172:	81 11       	cpse	r24, r1
 174:	07 c0       	rjmp	.+14     	; 0x184 <check_buttons+0xda>
			writeUART('B'); // Enviar B por UART
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	0e 94 1f 01 	call	0x23e	; 0x23e <writeUART>
			button_b_state = 1; // Actualiza el estado del botón B
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button_b_state>
 182:	08 95       	ret
			} else if (PINB & (1 << BUTTON_B)) {
 184:	1c 99       	sbic	0x03, 4	; 3
			button_b_state = 0; // Restablece el estado si se suelta el botón B
 186:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <button_b_state>
 18a:	08 95       	ret

0000018c <initTimer1>:
}

// Inicializa Timer1
void initTimer1(void) {
	// Configura Timer1 para generar una interrupción cada 1 ms
	TCCR1A = 0; // Modo normal
 18c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC y prescaler de 8
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 1999; // Valor para 1 ms (16MHz / 8 / 2000)
 196:	8f ec       	ldi	r24, 0xCF	; 207
 198:	97 e0       	ldi	r25, 0x07	; 7
 19a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar la interrupción de comparación
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 1a8:	08 95       	ret

000001aa <main>:
}

int main(void) {
	initUART9600();  // Inicializar UART a 9600 baud
 1aa:	0e 94 04 01 	call	0x208	; 0x208 <initUART9600>
	init_buttons();  // Inicializar los botones
 1ae:	0e 94 48 00 	call	0x90	; 0x90 <init_buttons>
	initTimer1();    // Inicializar Timer1
 1b2:	0e 94 c6 00 	call	0x18c	; 0x18c <initTimer1>
	sei();           // Habilitar interrupciones globales
 1b6:	78 94       	sei

	while (1) {
		check_buttons(); // Llamar a la función para verificar los botones
 1b8:	0e 94 55 00 	call	0xaa	; 0xaa <check_buttons>
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <main+0xe>

000001be <__vector_18>:
	}
	return 0;
}

// ISR de recepción UART
ISR(USART_RX_vect) {
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
	receivedChar = UDR0;  // Almacena el carácter recibido
 1ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	while (!(UCSR0A & (1 << UDRE0)));  // Mientras haya caracteres en el buffer
 1d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d6:	85 ff       	sbrs	r24, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <__vector_18+0x14>
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_11>:

// ISR del Timer1
ISR(TIMER1_COMPA_vect) {
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
	debounce_counter++; // Incrementar el contador de antirrebote
 1f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <debounce_counter>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <debounce_counter>
}
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <initUART9600>:
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8a b9       	out	0x0a, r24	; 10
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	82 60       	ori	r24, 0x02	; 2
 212:	8a b9       	out	0x0a, r24	; 10
 214:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 218:	e1 ec       	ldi	r30, 0xC1	; 193
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	10 82       	st	Z, r1
 21e:	80 81       	ld	r24, Z
 220:	88 69       	ori	r24, 0x98	; 152
 222:	80 83       	st	Z, r24
 224:	e2 ec       	ldi	r30, 0xC2	; 194
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	10 82       	st	Z, r1
 22a:	80 81       	ld	r24, Z
 22c:	86 60       	ori	r24, 0x06	; 6
 22e:	80 83       	st	Z, r24
 230:	87 e6       	ldi	r24, 0x67	; 103
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 238:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 23c:	08 95       	ret

0000023e <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 23e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 242:	95 ff       	sbrs	r25, 5
 244:	fc cf       	rjmp	.-8      	; 0x23e <writeUART>
	UDR0 = Caracter;
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
