
atmgacontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4f  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000528  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 38       	cpi	r26, 0x81	; 129
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  9e:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_buttons>:
#define BUTTON_A      PB3  // D11 en Arduino (PB3 en ATmega328P)
#define BUTTON_B      PB4  // D12 en Arduino (PB4 en ATmega328P)

void init_buttons() {
	// Configurar los pines como entradas con pull-up
	DDRD &= ~(1 << BUTTON_UP); // Configurar PD7 (D7) como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 77       	andi	r24, 0x7F	; 127
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON_UP); // Activar pull-up interno en PD7 (D7)
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~((1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) |(1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B)); // Configurar PB0-PB4 (D8-D12) como entradas
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 7e       	andi	r24, 0xE0	; 224
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << BUTTON_DOWN) | (1 << BUTTON_LEFT) |(1 << BUTTON_RIGHT) | (1 << BUTTON_A) | (1 << BUTTON_B);  // Activar pull-up interno en PB0-PB4 (D8-D12)
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8f 61       	ori	r24, 0x1F	; 31
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <check_buttons>:
}


void check_buttons() {
	// Comprobar si algún botón está presionado
	if (!(PIND & (1 << BUTTON_UP))) {
  c0:	4f 99       	sbic	0x09, 7	; 9
  c2:	0c c0       	rjmp	.+24     	; 0xdc <check_buttons+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ec       	ldi	r24, 0xC3	; 195
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <check_buttons+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <check_buttons+0x14>
  d4:	00 00       	nop
		_delay_ms(200);
		UART_send('U');
  d6:	85 e5       	ldi	r24, 0x55	; 85
  d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
	}
	if (!(PINB & (1 << BUTTON_DOWN))) {
  dc:	18 99       	sbic	0x03, 0	; 3
  de:	0c c0       	rjmp	.+24     	; 0xf8 <check_buttons+0x38>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ec       	ldi	r24, 0xC3	; 195
  e4:	99 e0       	ldi	r25, 0x09	; 9
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <check_buttons+0x26>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <check_buttons+0x30>
  f0:	00 00       	nop
		_delay_ms(200);
		UART_send('D');
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
	}
	if (!(PINB & (1 << BUTTON_LEFT))) {
  f8:	19 99       	sbic	0x03, 1	; 3
  fa:	0c c0       	rjmp	.+24     	; 0x114 <check_buttons+0x54>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ec       	ldi	r24, 0xC3	; 195
 100:	99 e0       	ldi	r25, 0x09	; 9
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <check_buttons+0x42>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <check_buttons+0x4c>
 10c:	00 00       	nop
		_delay_ms(200);
		UART_send('L');
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
	}
	if (!(PINB & (1 << BUTTON_RIGHT))) {
 114:	1a 99       	sbic	0x03, 2	; 3
 116:	0c c0       	rjmp	.+24     	; 0x130 <check_buttons+0x70>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ec       	ldi	r24, 0xC3	; 195
 11c:	99 e0       	ldi	r25, 0x09	; 9
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <check_buttons+0x5e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <check_buttons+0x68>
 128:	00 00       	nop
		_delay_ms(200);
		UART_send('R');
 12a:	82 e5       	ldi	r24, 0x52	; 82
 12c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
	}
	if (!(PINB & (1 << BUTTON_A))) {
 130:	1b 99       	sbic	0x03, 3	; 3
 132:	03 c0       	rjmp	.+6      	; 0x13a <check_buttons+0x7a>
		UART_send('A');
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
	}
	if (!(PINB & (1 << BUTTON_B))) {
 13a:	1c 99       	sbic	0x03, 4	; 3
 13c:	0c c0       	rjmp	.+24     	; 0x156 <check_buttons+0x96>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	83 ec       	ldi	r24, 0xC3	; 195
 142:	99 e0       	ldi	r25, 0x09	; 9
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <check_buttons+0x84>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <check_buttons+0x8e>
 14e:	00 00       	nop
		_delay_ms(200);
		UART_send('B');
 150:	82 e4       	ldi	r24, 0x42	; 66
 152:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_send>
 156:	08 95       	ret

00000158 <main>:
	
}


int main(void) {
	UART_init(9600);  // Inicializar UART a 9600 baud
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	95 e2       	ldi	r25, 0x25	; 37
 15c:	0e 94 be 00 	call	0x17c	; 0x17c <UART_init>
	init_buttons();   // Inicializar los botones
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <init_buttons>
	//sei();
	while (1) {
		check_buttons();  // Revisar el estado de los botones
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <check_buttons>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	81 ee       	ldi	r24, 0xE1	; 225
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x20>
 178:	00 00       	nop
 17a:	f4 cf       	rjmp	.-24     	; 0x164 <main+0xc>

0000017c <UART_init>:
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
}
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	9c 01       	movw	r18, r24
 192:	ad 01       	movw	r20, r26
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	44 1f       	adc	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	44 1f       	adc	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	74 e2       	ldi	r23, 0x24	; 36
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 10 01 	call	0x220	; 0x220 <__udivmodsi4>
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	31 09       	sbc	r19, r1
 1b4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1b8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1bc:	88 e9       	ldi	r24, 0x98	; 152
 1be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1c8:	08 95       	ret

000001ca <UART_send>:
 1ca:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ce:	95 ff       	sbrs	r25, 5
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <UART_send>
 1d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d6:	08 95       	ret

000001d8 <__vector_18>:
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART

ISR(USART_RX_vect) {
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 1e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1f2:	ef 5f       	subi	r30, 0xFF	; 255
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % sizeof(uart_buffer); // Actualizar el índice de la cabeza del buffer
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	8f 77       	andi	r24, 0x7F	; 127
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uart_buffer[uart_head] = '\0'; // Terminador de cadena
 204:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ef 5f       	subi	r30, 0xFF	; 255
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	10 82       	st	Z, r1
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__udivmodsi4>:
 220:	a1 e2       	ldi	r26, 0x21	; 33
 222:	1a 2e       	mov	r1, r26
 224:	aa 1b       	sub	r26, r26
 226:	bb 1b       	sub	r27, r27
 228:	fd 01       	movw	r30, r26
 22a:	0d c0       	rjmp	.+26     	; 0x246 <__udivmodsi4_ep>

0000022c <__udivmodsi4_loop>:
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	ee 1f       	adc	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	a2 17       	cp	r26, r18
 236:	b3 07       	cpc	r27, r19
 238:	e4 07       	cpc	r30, r20
 23a:	f5 07       	cpc	r31, r21
 23c:	20 f0       	brcs	.+8      	; 0x246 <__udivmodsi4_ep>
 23e:	a2 1b       	sub	r26, r18
 240:	b3 0b       	sbc	r27, r19
 242:	e4 0b       	sbc	r30, r20
 244:	f5 0b       	sbc	r31, r21

00000246 <__udivmodsi4_ep>:
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	1a 94       	dec	r1
 250:	69 f7       	brne	.-38     	; 0x22c <__udivmodsi4_loop>
 252:	60 95       	com	r22
 254:	70 95       	com	r23
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	9b 01       	movw	r18, r22
 25c:	ac 01       	movw	r20, r24
 25e:	bd 01       	movw	r22, r26
 260:	cf 01       	movw	r24, r30
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
